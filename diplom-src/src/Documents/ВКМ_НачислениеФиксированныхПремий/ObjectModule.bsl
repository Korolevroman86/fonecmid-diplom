#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
	
	
	Для Каждого СтрокаСотрудник из НачислениеВыплат Цикл
		СтатусСотрудника = ВКМ_РасчетыИНачисления.ПроверкаСтатусаСотрудника(СтрокаСотрудник.Сотрудник, Дата);
		Если Не СтатусСотрудника Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("%1 на дату документа не является трудоустроенным сотрудником.",СтрокаСотрудник.Сотрудник ), 
			      ЭтотОбъект, "НачислениеВыплат["+ СтрокаСотрудник.НомерСтроки +"].Сотрудник", "Объект", Отказ);
			
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.ВКМ_ДополнительныеНачисления.Добавить();
		Движение.Активность  = Истина;
		Движение.ПериодРегистрации = Дата;
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_ДополнительныеНачисления.Премия;
		Движение.Сотрудник = СтрокаСотрудник.Сотрудник;
		Движение.Результат = СтрокаСотрудник.Начислено;		
		
	КонецЦикла;
	Движения.ВКМ_ДополнительныеНачисления.Записать();
	ДвиженияУдержания();
	РасчетПоУдержаниямДвиженияВзаиморасчеты();


	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Процедура ДвиженияУдержания()
	
	Таблица = НачислениеВыплат.Выгрузить();
	Таблица.Свернуть("Сотрудник");
	Для Каждого СтрокаСотрудник из Таблица Цикл
	Движение = Движения.ВКМ_Удержания.Добавить();
		Движение.Активность  = Истина;
		Движение.ПериодРегистрации = Дата;
		Движение.БазовыйПериодНачало = НачалоМесяца(Дата);
		Движение.БазовыйПериодКонец = КонецМесяца(Дата);
		Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Движение.Сотрудник = СтрокаСотрудник.Сотрудник;				
	КонецЦикла;	
	
	Движения.ВКМ_Удержания.Записать();

КонецПроцедуры

Процедура РасчетПоУдержаниямДвиженияВзаиморасчеты()
	
 	Измерения = Новый Массив;
    Измерения.Добавить("Сотрудник");

    
    
    Запрос = Новый Запрос;
    Запрос.Текст  = "ВЫБРАТЬ
    |	ЕСТЬNULL(ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.РезультатБаза, 0) КАК РезультатБаза,
    |	ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.Сотрудник КАК Сотрудник,
    |	ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления.НомерСтроки КАК НомерСтроки
    |ИЗ
    |	РегистрРасчета.ВКМ_Удержания.БазаВКМ_ДополнительныеНачисления(&Измерения, &Измерения, ,
    |		Регистратор = &Регистратор) КАК ВКМ_УдержанияБазаВКМ_ДополнительныеНачисления";
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("Измерения",Измерения);
	
	Результат = Запрос.Выполнить().Выбрать();
   	
	Пока Результат.Следующий() Цикл
    	Движение = Движения.ВКМ_Удержания[Результат.НомерСтроки - 1];
    	
    	Движение.Результат = Результат.РезультатБаза *0.13;
    	
    	ДвижениеРасчеты = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
		ДвижениеРасчеты.Сотрудник = Движение.Сотрудник;
		ДвижениеРасчеты.ВидДвижения = ВидДвиженияНакопления.Приход;
		ДвижениеРасчеты.Период = Дата;
		ДвижениеРасчеты.Сумма = Результат.РезультатБаза - Движение.Результат;
   
    КонецЦикла;
   	
    Движения.ВКМ_Удержания.Записать();
    Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать();
КонецПроцедуры

#КонецОбласти

#КонецЕсли
	